Chapter 2:-
Getting familiar with TL- verilog:

a. basic syntax of tl-verilog is diffrent than verilog
b. we do not need to menstion any start or end of the program
c. we just have to put the input output variables and the tl-verilog will detect them and show them in a diagram format
d. Some important things to be noted for tl-verilog language:
	1. assignment statement act as declaration
	2. rigid syntax
	3. Are prefixed with "$".
	4. Begin with at least two alphabetic (lower-case) characters.
	5. 3 space indentation is necessary for /TL code block

Gate Symbols:-
not gate - !
and gate - & or &&
or gate - | or ||
xor gate - ^
nand gate - !( & )
nor gate - !( | )
xnor gate - !( ^ )
  
  
Arithmatic Logic:

a. Vectors are used to do direct operations instead of  making a whole circuit
b. This can be done by using arithmatic operators 
c. The size of the vectors is to be specified based on the output needed ($inp[6:0])
d. each value is in hexa decimal and occupy 4 bits 
e. hence if $inp1[1:0] is assigned than tis input signal will have 4 bits i.e., it will take numbers 0,1,2,3 and similar fashion is carried further hence it is easy to define the number of inputs


Multiplexer:

a. A multiplexer selects between two or more inputs
b. only one of the bits will be asserted to select the corresponding input value.
c. ternary (? :) operator is used
d. SYNTAX
	$out = $sel ? $in1 : $in0;
e. here $out is $in1 if $sel else it is $in2. 
f. Can also be used as if else statement(kind of)
$out[7:0] =
   $sel[3]
      ? $in3 :
   $sel[2]
      ? $in2 :
   $sel[1]
      ? $in1 :
   //default
        $in0; 
        
        
Literals:
any variable can be assigned a number to be stored
$foo[7:0] = 6
this means 6 will be cohearsed into 8-bits
$fo0[7:0] = 8'b110 (8 bits binary 6)
$foo[7:0] = 8'd6 (8 bits decimal 6)
$foo[7:0] = 8'h6 (8 bits hexadecimal 6)


Concatenation: combining two bit vectors in a single bit vector
$foo[15:0] = {$upperbyte, $lowerbyte}


we can reference the previous and previous-previous versions of $num as >>1$num and >>2$num.
an output will be generated at the rise in clock input(in a general case scenario)

Every sequential circuit needs the ability to get to a known "reset" state. And therefore, every sequential circuit will have a "reset" signal responsible for accomplishing this. 
The circuit must be designed such that, if reset is asserted for many cycles, 
The logic will stabilize to a known reset state.

During each cycle of the clock, the combinational logic evaluates, then the clock rises and next state becomes state, and the process continues.

we can use reset counter to set up previous values in counter using >> operator and reset pin
